{"ast":null,"code":"var _jsxFileName = \"/Users/murataeito/select-shop-map/src/components/Shop/form/ShopForm.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShopForm = ({\n  onSubmitData\n}) => {\n  _s();\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n\n  // Google Maps Geocoding API を使用したジオコーディング関数\n  const geocodeAddress = async address => {\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY; // ここに取得した API キーを入力\n    const query = encodeURIComponent(address);\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${query}&key=${apiKey}`);\n    if (!response.ok) {\n      throw new Error(\"Geocoding API の呼び出しに失敗しました\");\n    }\n    const result = await response.json();\n    if (result.status !== \"OK\" || result.results.length === 0) {\n      throw new Error(\"住所が見つかりませんでした\");\n    }\n    const location = result.results[0].geometry.location;\n    return {\n      latitude: location.lat,\n      longitude: location.lng\n    };\n  };\n  const onSubmit = async data => {\n    try {\n      const {\n        latitude,\n        longitude\n      } = await geocodeAddress(data.address);\n      const id = Date.now();\n      onSubmitData({\n        id,\n        name: data.name,\n        brands: data.brands.split(',').map(brand => brand.trim()),\n        latitude,\n        longitude\n      });\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"shop-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...register(\"name\", {\n        required: true\n      }),\n      placeholder: \"\\u30B7\\u30E7\\u30C3\\u30D7\\u540D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ...register(\"address\", {\n        required: true\n      }),\n      placeholder: \"\\u4F4F\\u6240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ...register(\"brands\"),\n      placeholder: \"\\u30D6\\u30E9\\u30F3\\u30C9\\uFF08\\u30AB\\u30F3\\u30DE\\u533A\\u5207\\u308A\\uFF09\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\u8FFD\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ShopForm, \"zkd3JmxRK/AmyiWtSfciHeYO5Zk=\", false, function () {\n  return [useForm];\n});\n_c = ShopForm;\nexport default ShopForm;\nvar _c;\n$RefreshReg$(_c, \"ShopForm\");","map":{"version":3,"names":["React","useForm","jsxDEV","_jsxDEV","ShopForm","onSubmitData","_s","register","handleSubmit","geocodeAddress","address","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","query","encodeURIComponent","response","fetch","ok","Error","result","json","status","results","length","location","geometry","latitude","lat","longitude","lng","onSubmit","data","id","Date","now","name","brands","split","map","brand","trim","error","alert","message","className","children","required","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/murataeito/select-shop-map/src/components/Shop/form/ShopForm.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype FormData = {\n  name: string;\n  address: string;\n  brands: string;\n};\n\ntype ShopFormProps = {\n  onSubmitData: (data: { id: number; name: string; brands: string[]; latitude: number; longitude: number }) => void;\n};\n\nconst ShopForm: React.FC<ShopFormProps> = ({ onSubmitData }) => {\n  const { register, handleSubmit } = useForm<FormData>();\n\n  // Google Maps Geocoding API を使用したジオコーディング関数\n  const geocodeAddress = async (address: string) => {\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY; // ここに取得した API キーを入力\n    const query = encodeURIComponent(address);\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${query}&key=${apiKey}`);\n    if (!response.ok) {\n      throw new Error(\"Geocoding API の呼び出しに失敗しました\");\n    }\n    const result = await response.json();\n    if (result.status !== \"OK\" || result.results.length === 0) {\n      throw new Error(\"住所が見つかりませんでした\");\n    }\n    const location = result.results[0].geometry.location;\n    return {\n      latitude: location.lat,\n      longitude: location.lng,\n    };\n  };\n\n  const onSubmit = async (data: FormData) => {\n    try {\n      const { latitude, longitude } = await geocodeAddress(data.address);\n      const id = Date.now();\n      onSubmitData({\n        id,\n        name: data.name,\n        brands: data.brands.split(',').map((brand) => brand.trim()),\n        latitude,\n        longitude,\n      });\n    } catch (error: any) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"shop-form\">\n      <input {...register(\"name\", { required: true })} placeholder=\"ショップ名\" />\n      <input {...register(\"address\", { required: true })} placeholder=\"住所\" />\n      <input {...register(\"brands\")} placeholder=\"ブランド（カンマ区切り）\" />\n      <button type=\"submit\">追加</button>\n    </form>\n  );\n};\n\nexport default ShopForm;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAY1C,MAAMC,QAAiC,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAGP,OAAO,CAAW,CAAC;;EAEtD;EACA,MAAMQ,cAAc,GAAG,MAAOC,OAAe,IAAK;IAChD,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B,CAAC,CAAC;IAC1D,MAAMC,KAAK,GAAGC,kBAAkB,CAACN,OAAO,CAAC;IACzC,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,6DAA6DH,KAAK,QAAQJ,MAAM,EAAE,CAAC;IAChH,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IACA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpC,IAAID,MAAM,CAACE,MAAM,KAAK,IAAI,IAAIF,MAAM,CAACG,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MACzD,MAAM,IAAIL,KAAK,CAAC,eAAe,CAAC;IAClC;IACA,MAAMM,QAAQ,GAAGL,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,CAACG,QAAQ,CAACD,QAAQ;IACpD,OAAO;MACLE,QAAQ,EAAEF,QAAQ,CAACG,GAAG;MACtBC,SAAS,EAAEJ,QAAQ,CAACK;IACtB,CAAC;EACH,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAOC,IAAc,IAAK;IACzC,IAAI;MACF,MAAM;QAAEL,QAAQ;QAAEE;MAAU,CAAC,GAAG,MAAMrB,cAAc,CAACwB,IAAI,CAACvB,OAAO,CAAC;MAClE,MAAMwB,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrB/B,YAAY,CAAC;QACX6B,EAAE;QACFG,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,MAAM,EAAEL,IAAI,CAACK,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QAC3Dd,QAAQ;QACRE;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOa,KAAU,EAAE;MACnBC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;IACtB;EACF,CAAC;EAED,oBACE1C,OAAA;IAAM6B,QAAQ,EAAExB,YAAY,CAACwB,QAAQ,CAAE;IAACc,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAC3D5C,OAAA;MAAA,GAAWI,QAAQ,CAAC,MAAM,EAAE;QAAEyC,QAAQ,EAAE;MAAK,CAAC,CAAC;MAAEC,WAAW,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvElD,OAAA;MAAA,GAAWI,QAAQ,CAAC,SAAS,EAAE;QAAEyC,QAAQ,EAAE;MAAK,CAAC,CAAC;MAAEC,WAAW,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvElD,OAAA;MAAA,GAAWI,QAAQ,CAAC,QAAQ,CAAC;MAAE0C,WAAW,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5DlD,OAAA;MAAQmD,IAAI,EAAC,QAAQ;MAAAP,QAAA,EAAC;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEX,CAAC;AAAC/C,EAAA,CA9CIF,QAAiC;EAAA,QACFH,OAAO;AAAA;AAAAsD,EAAA,GADtCnD,QAAiC;AAgDvC,eAAeA,QAAQ;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}